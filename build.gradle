plugins {
    id "java"
    id "maven-publish"
    id "edu.wpi.first.GradleRIO" version "2023.2.1"
    id "com.palantir.git-version" version "0.15.0"
}

apply plugin: "maven-publish"

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

group "com.teamnf.nf-vision"
version gitVersion()

// Maven/Jitpack configuration
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

javadoc {
    options {
        links "https://docs.oracle.com/en/java/javase/11/docs/api/"
    }
    options.addStringOption("doctitle", "NF-SENSORS API")
    options.addStringOption("windowtitle", "NF-SENSORS API")
    options.addBooleanOption("-allow-script-in-comments", true)
    options.addBooleanOption('Xdoclint:all,-missing', true)
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 5.
dependencies {
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

test {
    useJUnitPlatform()
    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
}

// Simulation configuration (e.g. environment variables).
wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

publishing {
    publications {
        maven(MavenPublication) {
            groupId 'com.teamnf.nf-sensors'
            artifactId 'sensors'
            version gitVersion()

		    from components.java
        }
    }
}

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
//jar {
//    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
//    duplicatesStrategy = DuplicatesStrategy.INCLUDE
//}

// Configure jar and deploy tasks
//wpi.java.configureExecutableTasks(jar)
//wpi.java.configureTestTasks(test)

// Configure string concat to always inline compile
tasks.withType(JavaCompile) {
    options.compilerArgs.add '-XDstringConcat=inline'
}


wrapper {
    gradleVersion = "7.2"
    distributionType = Wrapper.DistributionType.ALL
}